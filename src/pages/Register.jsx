import { useState } from "react";
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from "yup";
import {
  Container,
  Row,
  Col,
  Form as BootstrapForm,
  Button,
  InputGroup,
  FormControl,
} from "react-bootstrap";
import logo from "../assets/logo-gmail.png";
import { Link, useNavigate } from "react-router-dom";
import { userSignUp } from "../apis/auth/register";

const RegisterSchema = Yup.object().shape({
  firstName: Yup.string().required("First name is required"),
  lastName: Yup.string().required("Last name is required"),
  dateOfBirth: Yup.number()
    .min(1)
    .max(31)
    .required("Date of birth is required"),
  month: Yup.string().required("Month is required"),
  year: Yup.number()
    .min(1900, "Invalid year")
    .max(new Date().getFullYear(), "Invalid year")
    .required("Year is required"),
  email: Yup.string().email("Invalid email").required("Email is required"),
  password: Yup.string()
    .min(6, "Password must be at least 6 characters")
    .required("Password is required"),
  confirmPassword: Yup.string()
    .oneOf([Yup.ref("password"), null], "Passwords must match")
    .required("Confirm password is required"),
});

const generateEmail = (firstName, lastName) => {
  const randomNum1 = Math.floor(1000 + Math.random() * 9000);
  const randomNum2 = Math.floor(1000 + Math.random() * 9000);
  const email1 = `${firstName.toLowerCase()}${lastName[0].toUpperCase()}${randomNum1}@gmail.com`;
  const email2 = `${lastName[0].toUpperCase()}${firstName.toLowerCase()}${randomNum2}@gmail.com`;
  return [email1, email2];
};

const monthNames = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];

const Register = () => {
  const [autoGeneratedEmails, setAutoGeneratedEmails] = useState([]);
  const [message, setMessage] = useState("");
  const [isError, setIsError] = useState(false);
  const navigate = useNavigate();

  const combineDateValues = (values) => {
    const { month, dateOfBirth, year } = values;

    const numericMonth = monthNames.findIndex((name) => name === month) + 1;

    return `${dateOfBirth}/${numericMonth.toString().padStart(2, 0)}/${year}`;
  };

  const updateAutoGeneratedEmails = (values) => {
    if (values.firstName && values.lastName) {
      const emails = generateEmail(values.firstName, values.lastName);
      setAutoGeneratedEmails(emails);
    } else {
      setAutoGeneratedEmails([]);
    }
  };

  return (
    <Row className="vh-100 mb-5 mx-0">
      <Col
        md={6}
        className="d-flex flex-column align-items-center justify-content-center mb-3"
      >
        <Container
          fluid
          className="d-flex flex-column align-items-center justify-content-center"
          style={{
            minHeight: "30vh",
          }}
        >
          <img
            src={logo}
            alt="Gmail Logo"
            style={{ width: "100px", marginBottom: "20px" }}
          />
          <h1 className="text-center">Create your Gmail Account</h1>
        </Container>
      </Col>
      <Col
        md={6}
        className="d-flex flex-column align-items-center justify-content-center"
      >
        <Container
          fluid
          className="d-flex flex-column align-items-center justify-content-center"
          style={{
            minHeight: "70vh",
          }}
        >
          <Formik
            initialValues={{
              firstName: "",
              lastName: "",
              dateOfBirth: "",
              month: "",
              year: "",
              email: "",
              password: "",
              confirmPassword: "",
            }}
            validationSchema={RegisterSchema}
            onSubmit={async (values, { setSubmitting }) => {
              const birthDate = combineDateValues(values);
              const userData = {
                firstName: values.firstName,
                lastName: values.lastName,
                dateOfBirth: birthDate,
                email: values.email,
                password: values.password,
              };
              setSubmitting(false);
              setAutoGeneratedEmails([]);

              console.log(userData);

              try {
                const response = await userSignUp(userData);
                if (response && response.msg) {
                  setMessage(response.msg);
                  setIsError(false);
                  setTimeout(() => {
                    navigate("/");
                  }, 5000);
                }
              } catch (error) {
                setMessage("Error registering user");
                setIsError(true);
                console.error(error);
              }
            }}
          >
            {({ values, setFieldValue }) => (
              <Form>
                {message && (
                  <div
                    className={`alert ${
                      isError ? "alert-danger" : "alert-success"
                    }`}
                    role="alert"
                  >
                    {message}
                  </div>
                )}
                <Row className="mb-3">
                  <Col xs={12} sm={6}>
                    <InputGroup>
                      <InputGroup.Text>First Name</InputGroup.Text>
                      <Field
                        as={FormControl}
                        name="firstName"
                        placeholder="First name"
                        onChange={(e) => {
                          setFieldValue("firstName", e.target.value);
                          updateAutoGeneratedEmails({
                            ...values,
                            firstName: e.target.value,
                          });
                        }}
                      />
                    </InputGroup>
                    <ErrorMessage
                      name="firstName"
                      component="div"
                      className="text-danger"
                    />
                  </Col>
                  <Col xs={12} sm={6} className="mt-3 mt-sm-0">
                    <InputGroup>
                      <InputGroup.Text>Last Name</InputGroup.Text>
                      <Field
                        as={FormControl}
                        name="lastName"
                        placeholder="Last name"
                        onChange={(e) => {
                          setFieldValue("lastName", e.target.value);
                          updateAutoGeneratedEmails({
                            ...values,
                            lastName: e.target.value,
                          });
                        }}
                      />
                    </InputGroup>
                    <ErrorMessage
                      name="lastName"
                      component="div"
                      className="text-danger"
                    />
                  </Col>
                </Row>
                <Row className="mb-3">
                  <Col xs={12} sm={4}>
                    <InputGroup>
                      <InputGroup.Text>Month</InputGroup.Text>
                      <Field as="select" name="month" className="form-control">
                        <option value="">Select Month</option>
                        {monthNames.map((month) => (
                          <option key={month} value={month}>
                            {month}
                          </option>
                        ))}
                      </Field>
                    </InputGroup>
                    <ErrorMessage
                      name="month"
                      component="div"
                      className="text-danger"
                    />
                  </Col>
                  <Col xs={6} sm={4} className="mt-3 mt-sm-0">
                    <InputGroup>
                      <InputGroup.Text>Day</InputGroup.Text>
                      <Field
                        as={FormControl}
                        name="dateOfBirth"
                        placeholder="Day"
                        type="number"
                      />
                    </InputGroup>
                    <ErrorMessage
                      name="dateOfBirth"
                      component="div"
                      className="text-danger"
                    />
                  </Col>
                  <Col xs={6} sm={4} className="mt-3 mt-sm-0">
                    <InputGroup>
                      <InputGroup.Text>Year</InputGroup.Text>
                      <Field
                        as={FormControl}
                        name="year"
                        placeholder="Year"
                        type="number"
                      />
                    </InputGroup>
                    <ErrorMessage
                      name="year"
                      component="div"
                      className="text-danger"
                    />
                  </Col>
                </Row>
                <Row className="mb-3">
                  <Col xs={12}>
                    <div className="mb-3">
                      {autoGeneratedEmails.length > 0 && (
                        <>
                          <BootstrapForm.Check
                            type="radio"
                            name="emailOption"
                            id="autoGenerated"
                            label={autoGeneratedEmails[0]}
                            onChange={() =>
                              setFieldValue("email", autoGeneratedEmails[0])
                            }
                            checked={values.email === autoGeneratedEmails[0]}
                          />
                          <BootstrapForm.Check
                            type="radio"
                            name="emailOption"
                            id="autoGenerated2"
                            label={autoGeneratedEmails[1]}
                            onChange={() =>
                              setFieldValue("email", autoGeneratedEmails[1])
                            }
                            checked={values.email === autoGeneratedEmails[1]}
                          />
                          <BootstrapForm.Check
                            type="radio"
                            name="emailOption"
                            id="customEmail"
                            label="Custom Email"
                            onChange={() => setFieldValue("email", "")}
                            checked={
                              !autoGeneratedEmails.includes(values.email)
                            }
                          />
                        </>
                      )}
                    </div>

                    <InputGroup>
                      <InputGroup.Text>Email</InputGroup.Text>
                      <Field
                        as={FormControl}
                        name="email"
                        placeholder="Email"
                        disabled={autoGeneratedEmails.includes(values.email)}
                      />
                    </InputGroup>
                    <ErrorMessage
                      name="email"
                      component="div"
                      className="text-danger"
                    />
                  </Col>
                </Row>
                <Row className="mb-3">
                  <Col xs={12} sm={6}>
                    <InputGroup>
                      <InputGroup.Text>Password</InputGroup.Text>
                      <Field
                        as={FormControl}
                        name="password"
                        type="password"
                        placeholder="Password"
                      />
                    </InputGroup>
                    <ErrorMessage
                      name="password"
                      component="div"
                      className="text-danger"
                    />
                  </Col>
                  <Col xs={12} sm={6} className="mt-3 mt-sm-0">
                    <InputGroup>
                      <InputGroup.Text>Confirm Password</InputGroup.Text>
                      <Field
                        as={FormControl}
                        name="confirmPassword"
                        type="password"
                        placeholder="Confirm Password"
                      />
                    </InputGroup>
                    <ErrorMessage
                      name="confirmPassword"
                      component="div"
                      className="text-danger"
                    />
                  </Col>
                </Row>
                <Button
                  variant="primary"
                  type="submit"
                  className="w-100"
                  style={{
                    fontSize: "1rem",
                    fontWeight: "bold",
                    padding: "10px 20px",
                  }}
                >
                  Sign Up
                </Button>
                <div className="mt-5 text-center fw-bold d-flex flex-column">
                  Already have an account? {"   "}
                  <Link to="/login">Click here to login</Link>
                </div>
              </Form>
            )}
          </Formik>
        </Container>
      </Col>
    </Row>
  );
};

export default Register;
